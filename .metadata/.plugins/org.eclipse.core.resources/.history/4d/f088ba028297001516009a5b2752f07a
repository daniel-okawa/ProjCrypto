package src.algorithms;

import java.security.KeyPairGenerator;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;

import javax.crypto.spec.SecretKeySpec;

import org.bouncycastle.crypto.digests.SHA1Digest;
import org.bouncycastle.crypto.digests.SHA256Digest;
import org.bouncycastle.crypto.macs.HMac;
import org.bouncycastle.crypto.params.KeyParameter;

import sun.misc.BASE64Encoder;

public class HMAC {
	public String hmac_compute(byte[] key, String inputData, String type) {
		HMac hmac = null;
		if (type.equals("SHA-1")) {
			hmac = new HMac(new SHA1Digest());
		} else if (type.equals("SHA-256")) {
			hmac = new HMac(new SHA256Digest());
		}
		byte[] result = new byte[hmac.getMacSize()];
		System.out.println(hmac.getMacSize());
		byte[] msgAry = inputData.getBytes();
		KeyParameter kp = new KeyParameter(key);
		hmac.init(kp);
		hmac.update(msgAry, 0, msgAry.length);
		hmac.doFinal(result, 0);
		System.out.println(result);
		return result.toString();
	}

	public String generate_key() {

		BASE64Encoder b64 = new BASE64Encoder();

		SecureRandom random = createFixedRandom();
		byte[] keyBytes = new byte[1024];
		
		random.nextBytes(keyBytes);
		SecretKeySpec key = new SecretKeySpec(keyBytes, "HMAC");
		return key.getEncoded().toString();
	}

	public static SecureRandom createFixedRandom() {
		return new FixedRand();
	}

	private static class FixedRand extends SecureRandom {

		MessageDigest sha;
		byte[] state;

		FixedRand() {
			try {
				this.sha = MessageDigest.getInstance("SHA-1");
				this.state = sha.digest();
			} catch (NoSuchAlgorithmException e) {
				throw new RuntimeException("can't find SHA-1!");
			}
		}
	}
}
